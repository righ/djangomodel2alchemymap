# Code generated by d2a (https://github.com/walkframe/d2a).
# `/root/.tox/postgis/bin/py.test -vv` at Fri Apr 16 03:50:09 2021 UTC.


from importlib import import_module

import sqlalchemy as sa
from sqlalchemy import (
    types as default_types,
    Column,
    ForeignKey,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.dialects import (
    postgresql as postgresql_types,
    mysql as mysql_types,
    oracle as oracle_types,
)
from django.utils import timezone
from d2a import original_types
try:
    from geoalchemy2 import types as geotypes
except ImportError:
    pass



Base = declarative_base()


def GET_DEFAULT(path):
    '''DO NOT DELETE THIS FUNCTION'''

    module_path, model_name, field_name = path.rsplit(".", 2)
    try:
        module = import_module(module_path)
        model = getattr(module, model_name)
    except (ImportError, AttributeError):
        return None

    for field in model._meta.fields:
        if field.name == field_name:
            return field.default






class ContentType(Base):
    __tablename__ = 'django_content_type'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    app_label = Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    model = Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class LogEntry(Base):
    __tablename__ = 'django_admin_log'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    action_time = Column(
        postgresql_types.TIMESTAMP(),
        default=GET_DEFAULT('django.contrib.admin.models.LogEntry.action_time'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    content_type_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="django_content_type.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    object_id = Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    object_repr = Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    action_flag = Column(
        postgresql_types.SMALLINT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    change_message = Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = relationship(
        'User',
        foreign_keys="[django_admin_log.c.user_id]",
    )
    content_type = relationship(
        'ContentType',
        foreign_keys="[django_admin_log.c.content_type_id]",
    )


class GroupPermissions(Base):
    __tablename__ = 'auth_group_permissions'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    group_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group = relationship(
        'Group',
        foreign_keys="[auth_group_permissions.c.group_id]",
    )
    permission = relationship(
        'Permission',
        foreign_keys="[auth_group_permissions.c.permission_id]",
    )


class Group(Base):
    __tablename__ = 'auth_group'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    permissions = relationship(
        'Permission',
        secondary="auth_group_permissions",
        foreign_keys="[auth_group_permissions.c.group_id, auth_group_permissions.c.permission_id]",
    )


class Permission(Base):
    __tablename__ = 'auth_permission'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="django_content_type.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    codename = Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type = relationship(
        'ContentType',
        foreign_keys="[auth_permission.c.content_type_id]",
    )


class UserGroups(Base):
    __tablename__ = 'auth_user_groups'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = relationship(
        'User',
        foreign_keys="[auth_user_groups.c.user_id]",
    )
    group = relationship(
        'Group',
        foreign_keys="[auth_user_groups.c.group_id]",
    )


class UserUserPermissions(Base):
    __tablename__ = 'auth_user_user_permissions'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = Column(
        postgresql_types.INTEGER(),
        ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = relationship(
        'User',
        foreign_keys="[auth_user_user_permissions.c.user_id]",
    )
    permission = relationship(
        'Permission',
        foreign_keys="[auth_user_user_permissions.c.permission_id]",
    )


class User(Base):
    __tablename__ = 'auth_user'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    password = Column(
        postgresql_types.VARCHAR(length=128),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_login = Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    is_superuser = Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_superuser'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    username = Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    first_name = Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_name = Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    email = Column(
        postgresql_types.VARCHAR(length=254),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_staff = Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_staff'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_active = Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_active'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    date_joined = Column(
        postgresql_types.TIMESTAMP(),
        default=GET_DEFAULT('django.contrib.auth.models.User.date_joined'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    groups = relationship(
        'Group',
        secondary="auth_user_groups",
        foreign_keys="[auth_user_groups.c.user_id, auth_user_groups.c.group_id]",
    )
    user_permissions = relationship(
        'Permission',
        secondary="auth_user_user_permissions",
        foreign_keys="[auth_user_user_permissions.c.user_id, auth_user_user_permissions.c.permission_id]",
    )


class Session(Base):
    __tablename__ = 'django_session'
    
    session_key = Column(
        postgresql_types.VARCHAR(length=40),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    session_data = Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expire_date = Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Address(Base):
    __tablename__ = 'addresses'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    detail = Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    geom = Column(
        geotypes.Geometry(geometry_type="POINT", srid=4326, dimension=2, spatial_index=True),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Lake(Base):
    __tablename__ = 'lakes'
    
    id = Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    geom = Column(
        geotypes.Geometry(geometry_type="POLYGON", srid=4326, dimension=2, spatial_index=True),
        primary_key=False,
        unique=False,
        nullable=False,
    )



